import Dependencies.V
import com.awwsmm.sbt.DependencyUpdaterPlugin
import com.typesafe.sbt.SbtNativePackager
import com.typesafe.sbt.SbtNativePackager.Docker
import com.typesafe.sbt.packager.Keys.*
import com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin
import com.typesafe.sbt.packager.docker.{Cmd, DockerPlugin}
import org.apache.pekko.grpc.sbt.PekkoGrpcPlugin
import org.apache.pekko.grpc.sbt.PekkoGrpcPlugin.autoImport.*
import org.scalafmt.sbt.ScalafmtPlugin
import sbt.*
import sbt.Keys.*
import sbt.nio.Keys.{ReloadOnSourceChanges, onChangedBuildSource}
import sbt.{Compile, Global, Project}
import sbtbuildinfo.BuildInfoPlugin
import sbtbuildinfo.BuildInfoPlugin.autoImport.{BuildInfoKey, buildInfoKeys, buildInfoPackage}
import sbtprotoc.ProtocPlugin.autoImport.PB

object CommonSettings {

  def configureBuildInfo(project: Project) = project
    .enablePlugins(BuildInfoPlugin)
    .settings(
      buildInfoPackage := s"${organization.value}.${normalizedName.value.replace('-', '_')}",
      buildInfoKeys := Seq[BuildInfoKey](
        name,
        normalizedName,
        description,
        homepage,
        startYear,
        organization,
        organizationName,
        version,
        scalaVersion,
        sbtVersion,
        Compile / allDependencies
      )
    )

  def commonSettings(project: Project): Project =
    project
      .settings(
        organization := "io.github.sfali23",
        version := "0.1.0-SNAPSHOT",
        scalaVersion := V.Scala2_13,
        Global / onChangedBuildSource := ReloadOnSourceChanges,
        resolvers ++= Seq(
          "Sonatype OSS" at "https://s01.oss.sonatype.org/content/groups/public/"
        ),
        scalacOptions ++= Seq("-Xsource:3")
      )
      .configure(configureBuildInfo)
      .enablePlugins(ScalafmtPlugin, DependencyUpdaterPlugin)

  def pekkoGrpcSettings(apiProject: Project, generatedSource: Seq[PekkoGrpc.GeneratedSource])(project: Project): Project =
    project
      .enablePlugins(PekkoGrpcPlugin)
      .settings(
        (Compile / PB.protoSources) += (apiProject / baseDirectory).value / "src" / "main" / "protobuf",
        pekkoGrpcGeneratedSources := generatedSource,
        pekkoGrpcCodeGeneratorSettings := Seq("grpc", "single_line_to_proto_string"),
        scalacOptions ++= Seq(
          "-Wconf:src=pekko-grpc/.*:silent" // Ignore warnings in classes generated by pekko-grpc
        )
      )

  def docker(project: Project): Project =
    project
      .enablePlugins(AshScriptPlugin, SbtNativePackager, DockerPlugin)
      .settings(
        Docker / maintainer := maintainer.value,
        Docker / packageName := s"sfali23/${packageName.value}",
        Docker / defaultLinuxInstallLocation := "/opt/docker",
        dockerBaseImage := "eclipse-temurin:17-jdk-alpine",
        Docker / dockerCommands := (Docker / dockerCommands).value.flatMap {
          case userCmd @ Cmd("USER", "1001:0") =>
            Seq(
              // Add glibc compatibility layer to Alpine to ensure compatibility with recent versions of gRPC shaded Netty server
              // https://github.com/grpc/grpc-java/issues/10947
              Cmd("RUN", "apk update && apk add --no-cache gcompat"),
              // Next two packages to account for vulnerabilities https://nvd.nist.gov/vuln/detail/CVE-2024-5535 https://nvd.nist.gov/vuln/detail/CVE-2024-4741, https://nvd.nist.gov/vuln/detail/CVE-2024-4603,
              Cmd("RUN", "apk upgrade --no-cache libssl3"),
              Cmd("RUN", "apk upgrade --no-cache libcrypto3"),
              Cmd("ENV", "LD_PRELOAD=/lib/libgcompat.so.0"),
              userCmd
            )
          case o => Seq(o)
        },
        dockerExposedPorts := Seq(8080, 7070),
        dockerExposedVolumes := Seq("/opt/docker/logs"),
        dockerBuildOptions ++= Seq("--load"), // ensure built images are installed locally upon build
        dockerUpdateLatest := true
      )
}
